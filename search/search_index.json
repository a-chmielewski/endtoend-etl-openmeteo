{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Production-Ready ETL Pipeline"},{"location":"#openmeteo-weather-etl","title":"OpenMeteo Weather ETL","text":"<p> End-to-end data engineering pipeline demonstrating modern ELT patterns, automated quality checks, and real-time orchestration. Built with industry-standard open-source tools. </p> <p>View on GitHub  See Dashboard </p>"},{"location":"#project-highlights","title":"Project Highlights","text":"\ud83d\udd04 \u2705 \u26a1 \u23f0 \ud83d\udd27 \ud83d\udcca"},{"location":"#production-grade-elt","title":"Production-Grade ELT","text":"<p>Implements Extract-Load-Transform pattern with raw data lake, staging layer, and analytical marts following dimensional modeling.</p>"},{"location":"#automated-quality-gates","title":"Automated Quality Gates","text":"<p>Great Expectations validates every batch before loading, preventing bad data from corrupting the warehouse with schema and range checks.</p>"},{"location":"#incremental-processing","title":"Incremental Processing","text":"<p>Watermark-based ingestion fetches only new data, optimizing API usage and processing time while maintaining data freshness.</p>"},{"location":"#airflow-orchestration","title":"Airflow Orchestration","text":"<p>DAG-based workflow runs hourly, handling retries, dependencies, and monitoring. Fully containerized for reproducible deployments.</p>"},{"location":"#dbt-transformations","title":"dbt Transformations","text":"<p>SQL-based transformations with built-in testing, documentation, and lineage tracking. Separates business logic from infrastructure.</p>"},{"location":"#bi-ready-outputs","title":"BI-Ready Outputs","text":"<p>Metabase dashboards provide self-service analytics with filters and drill-downs. Daily aggregations optimized for query performance.</p>"},{"location":"#live-dashboard","title":"Live Dashboard","text":"<p>Interactive Metabase dashboard featuring:</p> <ul> <li>Multi-city temperature comparison with time-series visualization</li> <li>Daily aggregations (min, max, avg temperature)</li> <li>Date range filters for custom analysis</li> <li>Responsive design for mobile and desktop</li> </ul> <p>View Full Dashboard Details \u2192</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The pipeline follows a modern medallion architecture with separation of concerns:</p> <pre><code>flowchart TB\n    subgraph API[\"Data Source\"]\n        A[Open-Meteo API&lt;br/&gt;Weather Data]\n    end\n\n    subgraph Storage[\"Raw Data Lake\"]\n        B[MinIO S3&lt;br/&gt;Partitioned by Date/Hour]\n    end\n\n    subgraph Quality[\"Quality Gate\"]\n        F[Great Expectations&lt;br/&gt;Schema &amp; Range Validation]\n    end\n\n    subgraph Database[\"Data Warehouse\"]\n        C[PostgreSQL Staging&lt;br/&gt;staging.weather_hourly]\n        D[dbt Marts&lt;br/&gt;fct_city_day]\n    end\n\n    subgraph BI[\"Analytics Layer\"]\n        E[Metabase Dashboards&lt;br/&gt;Self-Service BI]\n    end\n\n    subgraph Orchestration[\"Workflow Management\"]\n        G[Apache Airflow&lt;br/&gt;Hourly Scheduling]\n    end\n\n    A --&gt;|Extract| B\n    B --&gt;|Validate| F\n    F --&gt;|Pass| C\n    C --&gt;|Transform| D\n    D --&gt;|Visualize| E\n    G -.-&gt;|Orchestrates| A\n    G -.-&gt;|Orchestrates| B\n    G -.-&gt;|Orchestrates| F\n    G -.-&gt;|Orchestrates| C\n    G -.-&gt;|Orchestrates| D\n\n    style A fill:#1e2542,stroke:#00d4ff\n    style B fill:#1e2542,stroke:#00d4ff\n    style C fill:#1e2542,stroke:#00d4ff\n    style D fill:#1e2542,stroke:#00d4ff\n    style E fill:#1e2542,stroke:#00d4ff\n    style F fill:#1e2542,stroke:#00d4ff\n    style G fill:#1e2542,stroke:#00d4ff</code></pre> <p>Key Design Decisions:</p> <ul> <li>Raw Data Persistence: All source data stored in MinIO for reprocessability and audit trails</li> <li>Quality-First: Validation happens before database insertion, maintaining data integrity</li> <li>Idempotent Operations: Upsert logic allows safe pipeline reruns without data duplication</li> <li>Incremental Processing: Only fetches data after last successful load timestamp</li> </ul> <p>Detailed Architecture Documentation \u2192</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>Python 3.9+ Core Language</p> <p>PostgreSQL 16 OLAP Database</p> <p>Apache Airflow 2.9+ Orchestration</p> <p>dbt Core 1.7+ Transformations</p> <p>Great Expectations Data Quality</p> <p>MinIO S3-Compatible Storage</p> <p>Metabase BI &amp; Dashboards</p> <p>Docker Compose Infrastructure</p> <p>Open Source Stack</p> <p>This entire stack runs on open-source tools. No cloud dependencies, fully containerized and reproducible.</p>"},{"location":"#key-metrics","title":"Key Metrics","text":"<p>8 Tech Stack</p> <p>Hourly Pipeline Runs</p> <p>100% Validated Data</p> <p>4 Cities Tracked</p>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#data-model","title":"Data Model","text":"<p>Explore the schema design, dimensional models, and table relationships in the data warehouse.</p>"},{"location":"#data-quality","title":"Data Quality","text":"<p>Learn about validation rules, expectations, and how bad data is prevented from entering the pipeline.</p>"},{"location":"#how-to-run","title":"How to Run","text":"<p>Step-by-step guide to deploy the pipeline locally with Docker, including troubleshooting tips.</p>"},{"location":"#architecture_1","title":"Architecture","text":"<p>System architecture overview showing how components interact in the ETL pipeline.</p>"},{"location":"#what-makes-this-project-stand-out","title":"What Makes This Project Stand Out","text":"<p>Industry Best Practices</p> <ul> <li>Version Control: All code, SQL, and configurations in Git</li> <li>Testing: dbt tests validate data transformations automatically</li> <li>Documentation: Self-documenting dbt models with descriptions</li> <li>CI/CD Ready: Structured for deployment to production environments</li> <li>Monitoring: Airflow tracks task success/failure with alerting capability</li> <li>Scalability: Partition-based storage supports growing data volumes</li> </ul> <p>Technical Highlights</p> <ul> <li>Incremental Processing: Watermark-based ingestion minimizes API calls and processing time</li> <li>Data Quality Gates: Validation prevents corrupted data from reaching the warehouse</li> <li>Idempotent Design: Pipeline can be safely rerun without data duplication</li> <li>Raw Data Persistence: Complete audit trail maintained in object storage</li> <li>Dimensional Modeling: Fact and dimension tables optimized for analytical queries</li> <li>Container Orchestration: Multi-service stack managed with Docker Compose</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Ready to run it yourself?</p> <p>How to Run Locally \u2192 View Source Code \u2192</p>  Built with :material-heart: by Aleksander Chmielewski"},{"location":"architecture/","title":"Architecture","text":"<p><code>mermaid flowchart LR   A[Open-Meteo API] --&gt; B[MinIO (raw)]   B --&gt; C[Postgres (staging)]   C --&gt; D[dbt (marts)]   D --&gt; E[Metabase (BI)]   B --&gt; F[Great Expectations (DQ)]   C --&gt; F   G[Airflow] --&gt; A   G --&gt; B   G --&gt; C   G --&gt; D   G --&gt; F</code></p>"},{"location":"credits/","title":"Credits","text":"<ul> <li>Data: Open-Meteo (public, no API key)</li> <li>Tools: Airflow, MinIO, PostgreSQL, dbt Core, Great Expectations, Metabase, Docker, MkDocs Material</li> </ul>"},{"location":"dashboard/","title":"Weather Analytics Dashboard","text":""},{"location":"dashboard/#overview","title":"Overview","text":"<p>The Metabase dashboard provides interactive, self-service analytics for exploring weather patterns across multiple European cities. Built on top of dbt-transformed dimensional models, it delivers real-time insights with filtering and drill-down capabilities.</p>"},{"location":"dashboard/#dashboard-preview","title":"Dashboard Preview","text":""},{"location":"dashboard/#key-features","title":"Key Features","text":"\ud83d\udcc8 \ud83d\udd0d \ud83c\udf0d \ud83d\udccb"},{"location":"dashboard/#time-series-visualization","title":"Time-Series Visualization","text":"<p>Track temperature trends over time with line charts showing min, max, and average daily temperatures for each city.</p>"},{"location":"dashboard/#interactive-filters","title":"Interactive Filters","text":"<p>Filter by date range and city to focus on specific time periods or locations. Results update instantly.</p>"},{"location":"dashboard/#multi-city-comparison","title":"Multi-City Comparison","text":"<p>Compare weather patterns across Warsaw, Berlin, Paris, and London simultaneously on a single view.</p>"},{"location":"dashboard/#detailed-data-table","title":"Detailed Data Table","text":"<p>Access granular daily statistics with sortable columns for deeper analysis and data validation.</p>"},{"location":"dashboard/#technical-implementation","title":"Technical Implementation","text":""},{"location":"dashboard/#data-source","title":"Data Source","text":"<p>The dashboard queries the <code>fct_city_day</code> dimensional model created by dbt:</p> <pre><code>-- Simplified view of the underlying data model\nSELECT \n    city,\n    date,\n    temperature_avg,\n    temperature_min,\n    temperature_max,\n    precipitation_sum,\n    wind_speed_max\nFROM analytics.fct_city_day\nWHERE date &gt;= CURRENT_DATE - INTERVAL '30 days'\nORDER BY date DESC, city;\n</code></pre>"},{"location":"dashboard/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Pre-aggregated data: Daily aggregations computed once by dbt, not on every query</li> <li>Indexed columns: Database indexes on <code>city</code> and <code>date</code> for fast filtering</li> <li>Materialized tables: dbt materializes marts as tables, not views</li> <li>Query caching: Metabase caches results for improved response times</li> </ul>"},{"location":"dashboard/#dashboard-configuration","title":"Dashboard Configuration","text":""},{"location":"dashboard/#metrics-displayed","title":"Metrics Displayed","text":"Metric Calculation Purpose Avg Temperature <code>AVG(temperature_2m)</code> Central tendency of daily temps Min Temperature <code>MIN(temperature_2m)</code> Daily low for cold analysis Max Temperature <code>MAX(temperature_2m)</code> Daily high for heat analysis Total Precipitation <code>SUM(precipitation)</code> Daily rainfall accumulation Max Wind Speed <code>MAX(wind_speed_10m)</code> Peak wind conditions"},{"location":"dashboard/#filter-options","title":"Filter Options","text":"<ul> <li>Date Range: Select custom start and end dates</li> <li>City: Choose one or more cities (Warsaw, Berlin, Paris, London)</li> <li>Time Granularity: Daily aggregations (can be extended to hourly)</li> </ul>"},{"location":"dashboard/#setting-up-the-dashboard","title":"Setting Up the Dashboard","text":""},{"location":"dashboard/#1-access-metabase","title":"1. Access Metabase","text":"<p>Navigate to http://localhost:3000 after running the Docker stack.</p>"},{"location":"dashboard/#2-connect-to-database","title":"2. Connect to Database","text":"<p>PostgreSQL Connection Settings: <pre><code>Host: postgres\nPort: 5432\nDatabase: analytics\nUsername: analytics\nPassword: &lt;your_password&gt;\n</code></pre></p>"},{"location":"dashboard/#3-create-visualizations","title":"3. Create Visualizations","text":"<p>Dashboard Creation</p> <ol> <li>Click New \u2192 Question</li> <li>Select the <code>fct_city_day</code> table</li> <li>Choose visualization type (line chart, table, etc.)</li> <li>Add filters for interactivity</li> <li>Save to dashboard</li> </ol>"},{"location":"dashboard/#4-share-embed","title":"4. Share &amp; Embed","text":"<p>Metabase supports:</p> <ul> <li>Public links for sharing outside the platform</li> <li>Embedded dashboards in web applications</li> <li>Scheduled email reports for stakeholders</li> <li>Slack/Teams integration for alerts</li> </ul>"},{"location":"dashboard/#potential-extensions","title":"Potential Extensions","text":""},{"location":"dashboard/#anomaly-detection","title":"Anomaly Detection","text":"<p>Add alerts for temperature extremes or unusual patterns using Metabase's alerting features.</p>"},{"location":"dashboard/#forecasting-models","title":"Forecasting Models","text":"<p>Integrate ML predictions alongside historical data for predictive analytics.</p>"},{"location":"dashboard/#additional-cities","title":"Additional Cities","text":"<p>Extend coverage to more European or global cities by updating the ingestion pipeline.</p>"},{"location":"dashboard/#hourly-granularity","title":"Hourly Granularity","text":"<p>Create hourly dashboards for intraday analysis using the staging tables directly.</p>"},{"location":"dashboard/#related-documentation","title":"Related Documentation","text":"<ul> <li>Data Model \u2192 - Understand the dimensional models powering the dashboard</li> <li>dbt Lineage \u2192 - Explore how raw data transforms into dashboard metrics</li> <li>How to Run \u2192 - Deploy the full stack including Metabase</li> </ul> <p>Back to Home</p>"},{"location":"data_model/","title":"Data Model","text":"<ul> <li> <p>staging.stg_weather_hourly (hourly grain)</p> </li> <li> <p>mart.fct_city_day (daily aggregates)</p> </li> </ul> <p>Columns documented in schema.yml (dbt). Keys: (city, ts) in staging.</p>"},{"location":"data_qulaity/","title":"Data Quality (Great Expectations)","text":"<ul> <li>Not null: city, timestamp</li> <li>Ranges: temperature [-60, 60], precipitation &gt;= 0</li> <li>No duplicates on (city, ts)</li> </ul>"},{"location":"how_to_run/","title":"How to Run (Dev)","text":"<ol> <li>cp .env.example .env</li> <li>docker compose up -d minio analytics-db metabase</li> <li>python ingestion/extractor/run_once.py</li> <li>Load to Postgres: run loader script.</li> <li>dbt run &amp;&amp; dbt test</li> <li>Open Metabase: http://localhost:3000</li> <li>Start Airflow: docker compose up -d airflow-db airflow-init airflow-scheduler airflow-webserver</li> </ol>"}]}